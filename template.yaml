AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app-testing

  Sample SAM Template for sam-app-testing

Globals:
  Function:
    Runtime: python3.7
    Layers:
      - !Ref AppDependenciesLayer
    Timeout: 3
    Environment:
      Variables:
        DB_HOST: !GetAtt RDS.Endpoint.Address
        DB_PORT: !GetAtt RDS.Endpoint.Port
        DB_NAME: "sample_rds"
        DB_USER: "root"
        DB_PASSWORD: "postgres"
        COGNITO_UUID: none
        USERPOOL_ID: "us-east-1_F4MBEZQbD"
        TOKEN_CLIENT_ID: "UserPoolTokenClient-XLtLZZkeA7dB"
        BUCKET_NAME: "sample-s3-dec062022"
        SQS_QUEUE_URL: "https://sqs.us-east-1.amazonaws.com/643878151433/sample_sqs.fifo"
        API_ENDPOINT_URL: "https://zdl60g849c.execute-api.us-east-1.amazonaws.com/Stage"

Resources:
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open PostgreSQL database access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "5"
      DBInstanceClass: "db.t2.micro"
      Engine: "postgres"
      EngineVersion: "12.10"
      PubliclyAccessible: true
      DBName: "sample_rds"
      MasterUsername: "root"
      MasterUserPassword: "postgres"
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: sample
      DefinitionBody: {
        "swagger" : "2.0",
        "info" : {
          "version" : "1.0",
          "title" : "sam-app"
        },
        "host" : "zdl60g849c.execute-api.us-east-1.amazonaws.com",
        "basePath" : "/Stage",
        "schemes" : [ "https" ],
        "paths" : {
          "/hello" : {
            "get" : {
              "responses" : { },
              "security" : [ {
                "APIAuthorizer" : [ ]
              } ],
              "x-amazon-apigateway-integration" : {
                "httpMethod" : "POST",
                "uri" : "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:643878151433:function:sam-app-HelloWorldFunction-KGP46i3RtFqb/invocations",
                "passthroughBehavior" : "when_no_match",
                "type" : "aws_proxy"
              }
            },
            "options" : {
              "consumes" : [ "application/json" ],
              "produces" : [ "application/json" ],
              "responses" : {
                "200" : {
                  "description" : "200 response",
                  "headers" : {
                    "Access-Control-Allow-Origin" : {
                      "type" : "string"
                    },
                    "Access-Control-Allow-Methods" : {
                      "type" : "string"
                    },
                    "Access-Control-Allow-Headers" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "x-amazon-apigateway-integration" : {
                "responses" : {
                  "default" : {
                    "statusCode" : "200",
                    "responseParameters" : {
                      "method.response.header.Access-Control-Allow-Methods" : "'GET,OPTIONS'",
                      "method.response.header.Access-Control-Allow-Headers" : "'Content-Type, Authorization'",
                      "method.response.header.Access-Control-Allow-Origin" : "'*'"
                    },
                    "responseTemplates" : {
                      "application/json" : "{}\n"
                    }
                  }
                },
                "requestTemplates" : {
                  "application/json" : "{\n  \"statusCode\" : 200\n}\n"
                },
                "passthroughBehavior" : "when_no_match",
                "type" : "mock"
              }
            }
          },
          "/login" : {
            "post" : {
              "responses" : { },
              "x-amazon-apigateway-integration" : {
                "httpMethod" : "POST",
                "uri" : "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:643878151433:function:sam-app-Login-ngNFlKHuhwgw/invocations",
                "passthroughBehavior" : "when_no_match",
                "type" : "aws_proxy"
              }
            },
            "options" : {
              "consumes" : [ "application/json" ],
              "produces" : [ "application/json" ],
              "responses" : {
                "200" : {
                  "description" : "200 response",
                  "headers" : {
                    "Access-Control-Allow-Origin" : {
                      "type" : "string"
                    },
                    "Access-Control-Allow-Methods" : {
                      "type" : "string"
                    },
                    "Access-Control-Allow-Headers" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "x-amazon-apigateway-integration" : {
                "responses" : {
                  "default" : {
                    "statusCode" : "200",
                    "responseParameters" : {
                      "method.response.header.Access-Control-Allow-Methods" : "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Headers" : "'Content-Type, Authorization'",
                      "method.response.header.Access-Control-Allow-Origin" : "'*'"
                    },
                    "responseTemplates" : {
                      "application/json" : "{}\n"
                    }
                  }
                },
                "requestTemplates" : {
                  "application/json" : "{\n  \"statusCode\" : 200\n}\n"
                },
                "passthroughBehavior" : "when_no_match",
                "type" : "mock"
              }
            }
          },
          "/update" : {
            "options" : {
              "consumes" : [ "application/json" ],
              "produces" : [ "application/json" ],
              "responses" : {
                "200" : {
                  "description" : "200 response",
                  "headers" : {
                    "Access-Control-Allow-Origin" : {
                      "type" : "string"
                    },
                    "Access-Control-Allow-Methods" : {
                      "type" : "string"
                    },
                    "Access-Control-Allow-Headers" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "x-amazon-apigateway-integration" : {
                "responses" : {
                  "default" : {
                    "statusCode" : "200",
                    "responseParameters" : {
                      "method.response.header.Access-Control-Allow-Methods" : "'OPTIONS,PATCH'",
                      "method.response.header.Access-Control-Allow-Headers" : "'Content-Type, Authorization'",
                      "method.response.header.Access-Control-Allow-Origin" : "'*'"
                    },
                    "responseTemplates" : {
                      "application/json" : "{}\n"
                    }
                  }
                },
                "requestTemplates" : {
                  "application/json" : "{\n  \"statusCode\" : 200\n}\n"
                },
                "passthroughBehavior" : "when_no_match",
                "type" : "mock"
              }
            },
            "patch" : {
              "responses" : { },
              "security" : [ {
                "APIAuthorizer" : [ ]
              } ],
              "x-amazon-apigateway-integration" : {
                "httpMethod" : "POST",
                "uri" : "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:643878151433:function:sam-app-UpdateCustomerFunction-yuZKAIqOtMKE/invocations",
                "passthroughBehavior" : "when_no_match",
                "type" : "aws_proxy"
              }
            }
          },
          "/upload" : {
            "post" : {
              "responses" : { },
              "security" : [ {
                "APIAuthorizer" : [ ]
              } ],
              "x-amazon-apigateway-integration" : {
                "httpMethod" : "POST",
                "uri" : "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:643878151433:function:sam-app-S3UploadFunction-FE63GvFPxHNC/invocations",
                "passthroughBehavior" : "when_no_match",
                "type" : "aws_proxy"
              }
            },
            "options" : {
              "consumes" : [ "application/json" ],
              "produces" : [ "application/json" ],
              "responses" : {
                "200" : {
                  "description" : "200 response",
                  "headers" : {
                    "Access-Control-Allow-Origin" : {
                      "type" : "string"
                    },
                    "Access-Control-Allow-Methods" : {
                      "type" : "string"
                    },
                    "Access-Control-Allow-Headers" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "x-amazon-apigateway-integration" : {
                "responses" : {
                  "default" : {
                    "statusCode" : "200",
                    "responseParameters" : {
                      "method.response.header.Access-Control-Allow-Methods" : "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Headers" : "'Content-Type, Authorization'",
                      "method.response.header.Access-Control-Allow-Origin" : "'*'"
                    },
                    "responseTemplates" : {
                      "application/json" : "{}\n"
                    }
                  }
                },
                "requestTemplates" : {
                  "application/json" : "{\n  \"statusCode\" : 200\n}\n"
                },
                "passthroughBehavior" : "when_no_match",
                "type" : "mock"
              }
            }
          },
          "/{bucket}/{filename}" : {
            "put" : {
              "parameters" : [ {
                "name" : "filename",
                "in" : "path",
                "required" : true,
                "type" : "string"
              }, {
                "name" : "bucket",
                "in" : "path",
                "required" : true,
                "type" : "string"
              } ],
              "responses" : {
                "200" : {
                  "description" : "200 response"
                }
              },
              "security" : [ {
                "APIAuthorizer" : [ ]
              } ],
              "x-amazon-apigateway-integration" : {
                "credentials" : "arn:aws:iam::643878151433:role/apigw-sample-1",
                "httpMethod" : "PUT",
                "uri" : "arn:aws:apigateway:us-east-1:s3:path/{bucket}/{key}",
                "responses" : {
                  "default" : {
                    "statusCode" : "200"
                  }
                },
                "requestParameters" : {
                  "integration.request.path.key" : "method.request.path.filename",
                  "integration.request.path.bucket" : "method.request.path.bucket"
                },
                "passthroughBehavior" : "when_no_match",
                "type" : "aws"
              }
            }
          }
        },
        "securityDefinitions" : {
          "APIAuthorizer" : {
            "type" : "apiKey",
            "name" : "Authorization",
            "in" : "header",
            "x-amazon-apigateway-authtype" : "cognito_user_pools",
            "x-amazon-apigateway-authorizer" : {
              "providerARNs" : [ "arn:aws:cognito-idp:us-east-1:643878151433:userpool/us-east-1_F4MBEZQbD" ],
              "type" : "cognito_user_pools"
            }
          }
        },
        "x-amazon-apigateway-binary-media-types" : [ "*/*" ]
      }
      Cors:
        AllowHeaders: "'Content-Type, Authorization'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          APIAuthorizer:
            UserPoolArn: !GetAtt "UserPool.Arn"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: UserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
  
  UserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  UserPoolCognitoTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: signup.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Events:
        CognitoPostSignup:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation

  AppDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AppDependencies
      Description: Application Dependencies Layer
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.7
        - python3.6
      RetentionPolicy: Delete

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sample-s3-dec062022
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedOrigins: ["*"]
            AllowedMethods: [GET, PUT, POST]
  
  SQSQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      ContentBasedDeduplication: true
      FifoQueue: true
      QueueName: "sample_sqs.fifo"
      RedrivePolicy: 
        deadLetterTargetArn: 
          Fn::GetAtt: 
            - "SQSDeadLetterQueue"
            - "Arn"
        maxReceiveCount: 3
      VisibilityTimeout: 120

  SQSDeadLetterQueue: 
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      FifoQueue: true
      QueueName: sample-deadletter.fifo
    
  SQSQueueTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: sqs.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonSQSFullAccess
        - AmazonS3FullAccess
        - AWSBatchFullAccess
      Environment:
        Variables:
          SQS_QUEUE: !Ref SQSQueue
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
            BatchSize: 1
  
  Login:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: login.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonCognitoPowerUser
      Environment:
        Variables:
          TOKEN_CLIENT_ID: !Ref UserPoolTokenClient
          USERPOOL_ID: !Ref UserPool
      Events:
        CognitoLogin:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /login
            Method: POST

  HelloWorldFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            RestApiId: !Ref API
            Path: /hello
            Method: get
            Auth:
              Authorizer: APIAuthorizer
  
  UpdateCustomerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: hello_world/
      Handler: update.handler
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            RestApiId: !Ref API
            Path: /update
            Method: patch
            Auth:
              Authorizer: APIAuthorizer
  
  S3UploadFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: hello_world/
      Handler: upload.handler
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            RestApiId: !Ref API
            Path: /upload
            Method: post
            Auth:
              Authorizer: APIAuthorizer

Outputs:
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  APIEndPoint:
    Description: API Endpoint
    Value:
      !Join [
        "",
        [
          "https://",
          !Ref API,
          ".execute-api.",
          !Ref AWS::Region,
          ".amazonaws.com/",
          api,
          "/",
        ],
      ]
    Export:
      Name: APIEndPoint
  RDSEndpoint:
    Description: RDS Endpoint
    Value: !Sub "${RDS.Endpoint.Address}:${RDS.Endpoint.Port}"
    Export:
      Name: RDSEndpoint
  QueueURL: 
    Description: "Amazon SQS Queue URL"
    Value:
      Ref: "SQSQueue"
    Export:
      Name: SQSQueue
  QueueARN: 
    Description: "AmazonSQS Queue ARN"
    Value: 
      Fn::GetAtt: 
        - "SQSQueue"
        - "Arn"
  QueueName: 
    Description: "Amazon SQS Queue Name"
    Value: 
      Fn::GetAtt: 
        - "SQSQueue"
        - "QueueName"
